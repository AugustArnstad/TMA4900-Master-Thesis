SVD <- VariableImportanceINLA::SVD_decomp(data[fixed])
lambda <- SVD$lambda
}else {
lambda <- diag(length(fixed))
}
samps_Z <- inla.posterior.sample(model, n = n_samp)
latent_row_names <- rownames(samps_Z[[1]]$latent)
output_length=length(samps_Z[[1]]$latent)
not_na = which(!is.na(data[response]))
for (i in 1:n_samp){
# Extract all sampled values, separate them by covariate/predictor, and assign them to the sampled matrix
samples_length <- 0
predictor <- paste0("^Predictor:")
predictor_names <- grep(predictor, latent_row_names, value = TRUE)
predictor_samples <- samps_Z[[i]]$latent[predictor_names, , drop = FALSE]
samples_tot <- length(predictor_samples)
if (fam == "binomial"){
if (link == "probit"){
distribution_var <- 1
} else if (link == "logit"){
distribution_var <- pi^2/3
}
}else if (fam == "poisson"){
if (link == "log"){
intercept <- samps_Z[[i]]$latent[output_length-length(fixed)]
distribution_var <- log((1/exp(intercept)) + 1)
}else if (link == "root"){
distribution_var <- 0.25
}
}
random_mat[i, 1] <- distribution_var
if (length(random)>1){
for (j in 2:length(random)){
pattern <- paste0("^", random[j], ":")
random_names <- grep(pattern, latent_row_names, value = TRUE)
random_samples <- samps_Z[[i]]$latent[random_names, , drop = FALSE]
samples_tot <- samples_tot + length(random_samples)
random_mat[i, j] <- var(random_samples)
}
}else{
if (i==n_samp){
print("No random effects, only resiudal variance")
}
}
beta <- samps_Z[[i]]$latent[(samples_tot+2):output_length]  #Skip intercept
#print(beta)
beta_mat[i, ] <- beta
#scaled_beta <- beta/scale_const
#scaled_beta_mat[i, ] <- scaled_beta
importance_mat[i, ] <- lambda^2 %*% beta^2
#scaled_importance_mat[i, ] <- lambda^2 %*% scaled_beta^2
}
rowsum <- rowSums(random_mat) + rowSums(importance_mat) + distribution_var
scaled_random_mat <- random_mat/rowsum
scaled_beta_mat <- beta_mat/rowsum
scaled_importance_mat <- importance_mat/rowsum
# Do not think these are correct!!!!! They do not contain the guassian observations for example.
# Could possibly use the variance of the predictor as the measure
R2_mat <- rowSums(importance_mat) / (rowSums(importance_mat) + rowSums(random_mat) + distribution_var)
if (length(random)>1){
R2_cond <- (rowSums(importance_mat) + rowSums(random_mat)) / (rowSums(importance_mat) + rowSums(random_mat) + distribution_var)
}else if (length(random)==1){
R2_cond <- (rowSums(importance_mat) + random_mat ) / (rowSums(importance_mat) + rowSums(random_mat) + distribution_var)
}else{
R2_cond <- rowSums(importance_mat)  / (rowSums(importance_mat) + rowSums(random_mat) + distribution_var)
}
beta_mat <- as.data.frame(beta_mat)
names(beta_mat) <- fixed
importance_mat <- as.data.frame(importance_mat)
names(importance_mat) <- fixed
scaled_beta_mat <- as.data.frame(scaled_beta_mat)
names(scaled_beta_mat) <- fixed
scaled_importance_mat <- as.data.frame(scaled_importance_mat)
names(scaled_importance_mat) <- fixed
random_mat <- as.data.frame(random_mat)
names(random_mat) <- random
scaled_random_mat <- as.data.frame(scaled_random_mat)
names(scaled_random_mat) <- random
R2_mat <- as.data.frame(R2_mat)
names(R2_mat) <- "Marginal R2"
R2_cond <- as.data.frame(R2_cond)
names(R2_cond) <- "Conditional R2"
if (!is.null(additive_param)){
h2_mat <- random_mat[, additive_param]/(rowSums(importance_mat) + rowSums(random_mat) + distribution_var)
h2_mat <- as.data.frame(h2_mat)
names(h2_mat) <- paste0("Heritability of: ", additive_param)
}
return(list(beta_samples = beta_mat,
importance_samples = importance_mat,
scaled_beta_samples = scaled_beta_mat,
scaled_importance_samples = scaled_importance_mat,
random_samples = random_mat,
scaled_random_samples = scaled_random_mat,
R2_marginal = R2_mat,
R2_conditional = R2_cond,
var_y = var_pred_mat,
heritability = h2_mat))
}
VariableImportanceINLA::sample_posterior_count(result_VII_binomial, formula_binomial, data_binomial, n_samp=5, additive_param=NULL, param_of_interest=NULL)#, distribution_var=1)
summary(result_VII_binomial)
# Simulate random effects
group_effect_pois <- rnorm(n_groups, mean = 0, sd = 1)
# Simulate fixed effect
fixed_effect_pois <- 1 # effect size for x
# Linear predictor and expected count
lambda <- exp(fixed_effect_pois * x1 + x2 + group_effect_pois[group])
# Simulate Poisson response
y_pois <- rpois(n, lambda = lambda)
# Create data frame
data_poisson <- data.frame(y = y_pois, x1 = x1, x2=x2, group = as.factor(group))
formula_poisson <- y ~ x1 + x2 + f(group, model = "iid")
# Fit the model using INLA
result_poisson <- inla(formula_poisson,
family = "poisson",
data = data_poisson,
control.family = list(link = "log"))
# Summary of the results
summary(result_poisson)
result_VII_poisson <- VariableImportanceINLA::perform_inla_analysis(data_poisson, formula_poisson, family = "poisson", "log")
VariableImportanceINLA::sample_posterior_count(result_VII_poisson, formula_poisson, data_poisson, n_samp=5, additive_param=NULL, param_of_interest=NULL, distribution_var=sigma_d)
VariableImportanceINLA::sample_posterior_count(result_VII_poisson, formula_poisson, data_poisson, n_samp=5, additive_param=NULL, param_of_interest=NULL)#, distribution_var=sigma_d)
summary(result_VII_poisson)
library(formatR)
showsol <- FALSE
library(knitr)
library(devtools)
knitr::opts_chunk$set(tidy.opts = list(width.cutoff = 68),
tidy = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
echo = TRUE,
fig.width=7,
fig.height=5,
fig.align="center")
library(remotes)
library(devtools)
if(!require(devtools)) install.packages("devtools")
devtools::install_github("AugustArnstad/VariableImportanceINLA")
library(VariableImportanceINLA)
library(INLA)
library(ggplot2)
library(reshape2)
library(tidyr)
set.seed(1)
# Number of observations and groups
n <- 10000
n_groups <- 100
# Simulate fixed effects
X1 <- rnorm(n, mean=0, sd=1)
X2 <- rnorm(n, mean=0, sd=1)
X3 <- rnorm(n, mean=0, sd=1)
# Simulate random effects groups
Z1 <- sample(1:n_groups, n, replace=TRUE)
Z2 <- sample(1:n_groups, n, replace=TRUE)
# Coefficients for fixed effects
beta0 <- 1
beta1 <- 1
beta2 <- 1
beta3 <- 1
# Coefficients for random effects (standard deviations)
sigma_z1 <- 1
sigma_z2 <- 1
# Simulate outcome variable Y
random_effect_contributions_z1 <- rnorm(n_groups, mean=0, sd=sigma_z1)[Z1]
random_effect_contributions_z2 <- rnorm(n_groups, mean=0, sd=sigma_z2)[Z2]
error_term <- rnorm(n, mean=0, sd=1)
eta <- beta0 + beta1*X1 + beta2*X2 + beta3*X3 + random_effect_contributions_z1 + random_effect_contributions_z2 + error_term
# Linear predictor and expected count
lambda <- exp(eta)
# Simulate Poisson response
y_pois <- rpois(n, lambda = lambda)
# Combine into a data frame
data_inla_poisson <- data.frame(y_pois, X1, X2, X3, Z1, Z2)#, Z3)
glm_formula <- y_pois ~ X1 + X2 + X3
glmm_1re_formula <- y_pois ~ X1 + X2 + X3 + f(Z1, model="iid")
glmm_2re_formula <- y_pois ~ X1 + X2 + X3 + f(Z1, model="iid") + f(Z2, model="iid")
glmm_0fe_formula <- y_pois ~ f(Z1, model="iid") + f(Z2, model="iid")
#prior = list(theta = list(initial=log(0.5), prior="pc.prec", param=c(sqrt(2),0.05)))
model_pois_glm <- VariableImportanceINLA::perform_inla_analysis(data_inla_poisson, glm_formula, family = "poisson", link_func = "log")
model_pois_glmm1 <- VariableImportanceINLA::perform_inla_analysis(data_inla_poisson, glmm_1re_formula, family = "poisson", link_func = "log")
model_pois_glmm2 <- VariableImportanceINLA::perform_inla_analysis(data_inla_poisson, glmm_2re_formula, family = "poisson", link_func = "log")
model_pois_glmm0 <- VariableImportanceINLA::perform_inla_analysis(data_inla_poisson, glmm_0fe_formula, family = "poisson", link_func = "log")
pois_glm_samples <- VariableImportanceINLA::sample_posterior_count(model_pois_glm, glm_formula, data_inla_poisson, n_samp=500)
pois_glmm1_samples <- VariableImportanceINLA::sample_posterior_count(model_pois_glmm1, glmm_1re_formula, data_inla_poisson, n_samp=500, additive_param = "Z1")
pois_glmm2_samples <- VariableImportanceINLA::sample_posterior_count(model_pois_glmm2, glmm_2re_formula, data_inla_poisson, n_samp=500, additive_param = "Z1")
pois_glmm0_samples <- VariableImportanceINLA::sample_posterior_count(model_pois_glmm0, glmm_0fe_formula, data_inla_poisson, n_samp=500, additive_param = "Z1")
plot_pois_glm <- VariableImportanceINLA::plot_samples(pois_glm_samples)
plot_pois_glmm1 <- VariableImportanceINLA::plot_samples(pois_glmm1_samples)
plot_pois_glmm2 <- VariableImportanceINLA::plot_samples(pois_glmm2_samples)
plot_pois_glmm0 <- VariableImportanceINLA::plot_samples(pois_glmm0_samples)
plot_pois_lmm2$fixed_effects
plot_pois_glmm2$fixed_effects
plot_pois_glmm2$random_effects
plot_pois_glmm2$R2
plot_pois_glmm2$heritability
?logit
data_poisson
beta_test%*%data_poisson[, c(x1, x2)]
beta_test <- c(1, 2)
beta_test%*%data_poisson[, c(x1, x2)]
beta_test%*%data_poisson[, c("x1", "x2")]
data_poisson[, c("x1", "x2")]
data_poisson[, c("x1", "x2")] %*% beta_test
as.matrix(data_poisson[, c("x1", "x2")]) %*% beta_test
setwd("/Users/augustarnstad/Library/CloudStorage/OneDrive-NTNU/Semester_10/R kladd")
library(formatR)
showsol <- FALSE
library(knitr)
library(devtools)
knitr::opts_chunk$set(tidy.opts = list(width.cutoff = 68),
tidy = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
echo = TRUE,
fig.width=7,
fig.height=5,
fig.align="center")
library(remotes)
library(devtools)
if(!require(devtools)) install.packages("devtools")
devtools::install_github("AugustArnstad/VariableImportanceINLA")
library(VariableImportanceINLA)
setwd("/Users/augustarnstad/Library/CloudStorage/OneDrive-NTNU/Semester_10/Animal modelling INLA, sparrows")
source("code/DataPrep.R")
str(d.morph)
AA <- solve(Ainv$Ainv)
# Some trick to make the thing numerically stable, because the inversion leads to some tiny non-zero values that are artefacts of the inversion...:
AA <- round(AA,8)
AA[AA==0] <- 0
# Final A-matrix:
AAA <- AA[d.map[1:3116,2],d.map[1:3116,2]]
#
isSymmetric(AAA)
# A-matrix needs to be inverted to be used in INLA:
Cmatrix <- solve(AAA)
# Again, to correct for some numerical instability, we set values <10^{-4} to 0
Cmatrix <- round(Cmatrix,4)
Cmatrix[Cmatrix==0] <- 0
isSymmetric(Cmatrix)
prior_mass = list(theta = list(initial=log(0.5),  prior="pc.prec",param=c(sqrt(2),0.05)))
model_mass <- VariableImportanceINLA::perform_inla_analysis(d.morph, formula.mass, "gaussian", priors = prior_mass)
samples_mass <- VariableImportanceINLA::sample_posterior_gaussian(model_mass, formula.mass, d.morph, n_samp=10000, additive_param = "IDC2")
plots_mass <- VariableImportanceINLA::plot_samples(samples_mass)
plots_mass$fixed_effects
plots_mass$random_effects
plots_mass$heritability
plots_mass$R2
prior_wing = list(theta = list(initial=log(0.5),  prior="pc.prec",param=c(sqrt(2),0.05)))
model_wing <- VariableImportanceINLA::perform_inla_analysis(d.morph, formula.wing, "gaussian", priors = prior_wing)
samples_wing <- VariableImportanceINLA::sample_posterior_gaussian(model_wing, formula.wing, d.morph, n_samp=10000, additive_param = "IDC2")
plots_wing <- VariableImportanceINLA::plot_samples(samples_wing)
plots_wing$fixed_effects
plots_wing$random_effects
plots_wing$heritability
plots_wing$R2
library(ggplot2)
# Example data
data <- data.frame(
Covariate = c("Covariate 1", "Covariate 2", "Covariate 3", "Error"),
Contribution = c(0.4, 0.25, 0.05, 0.30)  # These values should sum to 100 or the total variance
)
data$Covariate <- factor(data$Covariate, levels = c("Error", "Covariate 3", "Covariate 2", "Covariate 1"))
R2 <- sum(data$Contribution[data$Covariate != "Error"])
cov1 <- 0.4
cov2 <- 0.25
cov3 <- 0.05
# Create the plot
plot <- ggplot(data, aes(x = "", y = Contribution, fill = Covariate)) +
geom_bar(stat = "identity", width = 0.5) +  # Adjust the bar width here
scale_fill_brewer(palette = "Pastel1") +
theme_minimal() +
labs(y = "",
x = "",
title = "Relative Importance of Variables",
fill = "Covariate") +
theme(axis.text.x = element_blank()) +
geom_hline(yintercept = 0.7, color = "black", linetype = "dashed") +
annotate("text", x = 0.7, y = 0.65, label = paste("R2 =", R2), size = 8, hjust = 1) +
annotate("text", x = 1, y = 0.67, label = paste("Importance =", cov3), size = 4, hjust = 1) +
annotate("text", x = 1.042, y = 0.52, label = paste("Importance =", cov2), size = 5, hjust = 1) +
annotate("text", x = 1.07, y = 0.2, label = paste("Importance =", cov1), size = 6, hjust = 1)
# Display the plot
print(plot)
prior_tarsus = list(theta = list(initial=log(0.5),  prior="pc.prec",param=c(sqrt(2),0.05)))
model_tarsus <- VariableImportanceINLA::perform_inla_analysis(d.morph, formula.tarsus, "gaussian", priors = prior_tarsus)
samples_tarsus <- VariableImportanceINLA::sample_posterior_gaussian(model_tarsus, formula.tarsus, d.morph, n_samp=10000, additive_param = "IDC2")
plots_tarsus <- VariableImportanceINLA::plot_samples(samples_tarsus)
plots_tarsus$fixed_effects
plots_tarsus$random_effects
plots_tarsus$heritability
plots_tarsus$R2
dim(d.morph)
plots_tarsus$heritability
plots_wing$heritability
str(samples_wing)
# Dynamically specify the column name in aes() using rlang's sym() and !! for tidy evaluation
heritability_wing <- ggplot(samples_wing$scaled_random_samples, aes(x = !!sym(additive_genetic))) +
geom_histogram(aes(y = ..density..), fill = "#C6CDF7", alpha = 0.7, bins = 40) +
geom_density(color = "#E6A0C4", adjust = 1.5, linewidth=1.5) +
labs(title = paste("Heritability of wing"), x = "Samples of heritability", y = "Frequency") +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
axis.text.x = element_text(size = 24),
axis.text.y = element_text(size = 24)
)
str(samples_mass)
additive_genetic <- "IDC2"
# Dynamically specify the column name in aes() using rlang's sym() and !! for tidy evaluation
heritability_mass <- ggplot(samples_mass$scaled_random_samples, aes(x = !!sym(additive_genetic))) +
geom_histogram(aes(y = ..density..), fill = "#C6CDF7", alpha = 0.7, bins = 40) +
geom_density(color = "#E6A0C4", adjust = 1.5, linewidth=1.5) +
labs(title = paste("Heritability of mass"), x = "Samples of heritability", y = "Frequency") +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
axis.text.x = element_text(size = 24),
axis.text.y = element_text(size = 24)
)
# theme(
#   plot.background = element_rect(fill = "white"),
#   #panel.grid.major = element_blank(),
#   #panel.grid.minor = element_blank(),
#   text = element_text(size = 12, family = "Arial"),
#   axis.text.x = element_text(angle = 45, hjust = 1)
# )
heritability_mass
str(samples_wing)
# Dynamically specify the column name in aes() using rlang's sym() and !! for tidy evaluation
heritability_wing <- ggplot(samples_wing$scaled_random_samples, aes(x = !!sym(additive_genetic))) +
geom_histogram(aes(y = ..density..), fill = "#C6CDF7", alpha = 0.7, bins = 40) +
geom_density(color = "#E6A0C4", adjust = 1.5, linewidth=1.5) +
labs(title = paste("Heritability of wing"), x = "Samples of heritability", y = "Frequency") +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
axis.text.x = element_text(size = 24),
axis.text.y = element_text(size = 24)
)
# theme(
#   plot.background = element_rect(fill = "white"),
#   #panel.grid.major = element_blank(),
#   #panel.grid.minor = element_blank(),
#   text = element_text(size = 12, family = "Arial"),
#   axis.text.x = element_text(angle = 45, hjust = 1)
# )
heritability_wing
str(samples_tarsus)
# Dynamically specify the column name in aes() using rlang's sym() and !! for tidy evaluation
heritability_tarsus <- ggplot(samples_tarsus$scaled_random_samples, aes(x = !!sym(additive_genetic))) +
geom_histogram(aes(y = ..density..), fill = "#C6CDF7", alpha = 0.7, bins = 100) +
geom_density(color = "#E6A0C4", adjust = 1.5, linewidth=1.5) +
labs(title = paste("Heritability of tarsus"), x = "Samples of heritability", y = "Frequency") +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
axis.text.x = element_text(size = 24),
axis.text.y = element_text(size = 24)
)
heritability_tarsus
mean(samples_mass$scaled_random_samples$IDC2)
mean(samples_wing$scaled_random_samples$IDC2)
mean(samples_tarsus$scaled_random_samples$IDC2)
?se
sd(samples_tarsus$scaled_random_samples$IDC2)/sqrt(length(samples_tarsus$scaled_random_samples$IDC2)))
sd(samples_tarsus$scaled_random_samples$IDC2)/sqrt(length(samples_tarsus$scaled_random_samples$IDC2))
sd(samples_tarsus$scaled_random_samples$IDC2)#/sqrt(length(samples_tarsus$scaled_random_samples$IDC2))
quantile(samples_tarsus$scaled_random_samples$IDC2, c(0.025, 0.975))
quantile(samples_wing$scaled_random_samples$IDC2, c(0.025, 0.975))
quantile(samples_mass$scaled_random_samples$IDC2, c(0.025, 0.975))
quantile(samples_wing$scaled_random_samples$IDC2, c(0.025, 0.975))
# Dynamically specify the column name in aes() using rlang's sym() and !! for tidy evaluation
heritability_wing <- ggplot(samples_wing$scaled_random_samples, aes(x = !!sym(additive_genetic))) +
geom_histogram(aes(y = ..density..), fill = "#C6CDF7", alpha = 0.7, bins = 40) +
geom_density(color = "#E6A0C4", adjust = 1.5, linewidth=1.5) +
geom_point(aes(x = mean(samples_wing$scaled_random_samples$IDC2), y = 0), color = "red", size = 4) +
labs(title = paste("Heritability of wing"), x = "Samples of heritability", y = "Frequency") +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
axis.text.x = element_text(size = 24),
axis.text.y = element_text(size = 24)
)
heritability_wing
# Dynamically specify the column name in aes() using rlang's sym() and !! for tidy evaluation
heritability_wing <- ggplot(samples_wing$scaled_random_samples, aes(x = !!sym(additive_genetic))) +
geom_histogram(aes(y = ..density..), fill = "#C6CDF7", alpha = 0.7, bins = 40) +
geom_density(color = "#E6A0C4", adjust = 1.5, linewidth=1.5) +
geom_point(aes(x = mean(samples_wing$scaled_random_samples$IDC2), y = 0), color = "#E6A0C4", size = 4) +
labs(title = paste("Heritability of wing"), x = "Samples of heritability", y = "Frequency") +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
axis.text.x = element_text(size = 24),
axis.text.y = element_text(size = 24)
)
heritability_wing
str(samples_mass)
additive_genetic <- "IDC2"
# Dynamically specify the column name in aes() using rlang's sym() and !! for tidy evaluation
heritability_mass <- ggplot(samples_mass$scaled_random_samples, aes(x = !!sym(additive_genetic))) +
geom_histogram(aes(y = ..density..), fill = "#C6CDF7", alpha = 0.7, bins = 40) +
geom_density(color = "#E6A0C4", adjust = 1.5, linewidth=1.5) +
geom_point(aes(x = mean(samples_mass$scaled_random_samples$IDC2), y = 0), color = "#E6A0C4", size = 4) +
labs(title = paste("Heritability of mass"), x = "Samples of heritability", y = "Frequency") +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
axis.text.x = element_text(size = 24),
axis.text.y = element_text(size = 24)
)
# theme(
#   plot.background = element_rect(fill = "white"),
#   #panel.grid.major = element_blank(),
#   #panel.grid.minor = element_blank(),
#   text = element_text(size = 12, family = "Arial"),
#   axis.text.x = element_text(angle = 45, hjust = 1)
# )
heritability_mass
mean(samples_mass$scaled_random_samples$IDC2)
quantile(samples_mass$scaled_random_samples$IDC2, c(0.025, 0.975))
str(samples_wing)
# Dynamically specify the column name in aes() using rlang's sym() and !! for tidy evaluation
heritability_wing <- ggplot(samples_wing$scaled_random_samples, aes(x = !!sym(additive_genetic))) +
geom_histogram(aes(y = ..density..), fill = "#C6CDF7", alpha = 0.7, bins = 40) +
geom_density(color = "#E6A0C4", adjust = 1.5, linewidth=1.5) +
geom_point(aes(x = mean(samples_wing$scaled_random_samples$IDC2), y = 0), color = "#E6A0C4", size = 4) +
labs(title = paste("Heritability of wing"), x = "Samples of heritability", y = "Frequency") +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
axis.text.x = element_text(size = 24),
axis.text.y = element_text(size = 24)
)
# theme(
#   plot.background = element_rect(fill = "white"),
#   #panel.grid.major = element_blank(),
#   #panel.grid.minor = element_blank(),
#   text = element_text(size = 12, family = "Arial"),
#   axis.text.x = element_text(angle = 45, hjust = 1)
# )
heritability_wing
mean(samples_wing$scaled_random_samples$IDC2)
quantile(samples_wing$scaled_random_samples$IDC2, c(0.025, 0.975))
str(samples_tarsus)
# Dynamically specify the column name in aes() using rlang's sym() and !! for tidy evaluation
heritability_tarsus <- ggplot(samples_tarsus$scaled_random_samples, aes(x = !!sym(additive_genetic))) +
geom_histogram(aes(y = ..density..), fill = "#C6CDF7", alpha = 0.7, bins = 100) +
geom_density(color = "#E6A0C4", adjust = 1.5, linewidth=1.5) +
geom_point(aes(x = mean(samples_tarsus$scaled_random_samples$IDC2), y = 0), color = "#E6A0C4", size = 4) +
labs(title = paste("Heritability of tarsus"), x = "Samples of heritability", y = "Frequency") +
theme_minimal() +
theme(legend.position = "none",
axis.title.x = element_text(size = 24),
axis.title.y = element_text(size = 24),
axis.text.x = element_text(size = 24),
axis.text.y = element_text(size = 24)
)
heritability_tarsus
mean(samples_tarsus$scaled_random_samples$IDC2)
quantile(samples_tarsus$scaled_random_samples$IDC2, c(0.025, 0.975))
sd(samples_tarsus$scaled_random_samples$IDC2)#/sqrt(length(samples_tarsus$scaled_random_samples$IDC2))
setwd("/Users/augustarnstad/Library/CloudStorage/OneDrive-NTNU/Semester_10/Master/Latex/Figures")
plot_folder <- "House sparrow study"
# Check if the folder exists, if not, create it
if (!dir.exists(plot_folder)) {
dir.create(plot_folder)
}
ggsave(filename="Heritability_mass.png", plot=heritability_mass, path=plot_folder, width = 10, height = 6, dpi = 300)
ggsave(filename="Heritability_wing.png", plot=heritability_wing, path=plot_folder, width = 10, height = 6, dpi = 300)
ggsave(filename="Heritability_tarsus.png", plot=heritability_tarsus, path=plot_folder, width = 10, height = 6, dpi = 300)
library(ggplot2)
# Example data
data <- data.frame(
Covariate = c("Covariate 1", "Covariate 2", "Covariate 3", "Error"),
Contribution = c(0.4, 0.25, 0.05, 0.30)  # These values should sum to 100 or the total variance
)
data$Covariate <- factor(data$Covariate, levels = c("Error", "Covariate 3", "Covariate 2", "Covariate 1"))
R2 <- sum(data$Contribution[data$Covariate != "Error"])
cov1 <- 0.4
cov2 <- 0.25
cov3 <- 0.05
# Create the plot
plot <- ggplot(data, aes(x = "", y = Contribution, fill = Covariate)) +
geom_bar(stat = "identity", width = 0.5) +  # Adjust the bar width here
scale_fill_brewer(palette = "Pastel1") +
theme_minimal() +
labs(y = "",
x = "",
title = "Relative Importance of Variables",
fill = "Covariate") +
theme(axis.text.x = element_blank()) +
geom_hline(yintercept = 0.7, color = "black", linetype = "dashed") +
annotate("text", x = 0.7, y = 0.65, label = paste("R2 =", R2), size = 8, hjust = 1) +
annotate("text", x = 1, y = 0.67, label = paste("Importance =", cov3), size = 4, hjust = 1) +
annotate("text", x = 1.042, y = 0.52, label = paste("Importance =", cov2), size = 5, hjust = 1) +
annotate("text", x = 1.07, y = 0.2, label = paste("Importance =", cov1), size = 6, hjust = 1)
# Display the plot
print(plot)
1/(7 + pi^2/3)
2/(7 + pi^2/3)
3/(7 + pi^2/3)
